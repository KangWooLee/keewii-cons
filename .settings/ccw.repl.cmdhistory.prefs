cmdhistory=[";; Switching to keewii-cons.core namespace" "(ns keewii-cons.core\\r\\n  (\:use [overtone.live]\\r\\n        [keewii-cons.toolbox]\\r\\n        [keewii-cons.sequence]\\r\\n        [keewii-cons.basic_setting]))\\r\\n;Sliders for vowel (1st tab)\\r\\n(dosync\\r\\n (osc-handle server \\"/1/fader1\\" (fn [msg] (silent-alter-vowel-f1 vowel (first (\:args msg)))))\\r\\n (osc-handle server \\"/1/fader2\\" (fn [msg] (silent-alter-vowel-f2 vowel (first (\:args msg))))))\\r\\n\\r\\n;Buttons for consonant (1st tab)\\r\\n(doseq [i (range (.length Consonant-list))]\\r\\n  (let [CONSONANT (str2con_conv (Consonant-list i))\\r\\n        BUTTON (str \\"/1/push\\" (button_re-sort i))]\\r\\n    (osc-handle server BUTTON (fn [msg] (Enable-Consonant (first (\:args msg)) CONSONANT)))))\\r\\n;stop button (1st tab)\\r\\n(osc-handle server \\"/1/push10\\" (fn [msg] (enable-vowel (first (\:args msg)))));vowel only\\r\\n(osc-handle server \\"/1/push11\\" (fn [msg] (enable-play (first (\:args msg)))));play\\r\\n(osc-handle server \\"/1/push12\\" (fn [msg] (stop)));stop\\r\\n\\r\\n;xy plot in 4th tab\\r\\n(osc-handle server \\"/4/xy\\" (fn [msg](println msg) (vowel-xy f1 f2 (seq (\:args msg)))))\\r\\n(osc-handle server \\"/4/toggle5\\" (fn [msg](println msg) (enable-play (first (\:args msg))))) ;play&stop toggle\\r\\n\\r\\n;(osc-close client)\\r\\n;(osc-close server) \\r\\n;(stop)" "(ns keewii-cons.core\\r\\n  (\:use [overtone.live]\\r\\n        [keewii-cons.toolbox]\\r\\n        [keewii-cons.sequence]\\r\\n        [keewii-cons.basic_setting]))" ";; Switching to keewii-cons.core namespace" ";; Switching to keewii_cons.core namespace" "(ns keewii_cons.core\\r\\n  (\:use [overtone.live]\\r\\n        [keewii_cons.toolbox]\\r\\n        [keewii_cons.sequence]\\r\\n        [keewii_cons.basic_setting]))" "(dosync\\r\\n (osc-handle server \\"/1/fader1\\" (fn [msg] (silent-alter-vowel-f1 vowel (first (\:args msg)))))\\r\\n (osc-handle server \\"/1/fader2\\" (fn [msg] (silent-alter-vowel-f2 vowel (first (\:args msg))))))\\r\\n\\r\\n;Buttons for consonant (1st tab)\\r\\n(doseq [i (range (.length Consonant-list))]\\r\\n  (let [CONSONANT (str2con_conv (Consonant-list i))\\r\\n        BUTTON (str \\"/1/push\\" (button_re-sort i))]\\r\\n    (osc-handle server BUTTON (fn [msg] (Enable-Consonant (first (\:args msg)) CONSONANT)))))\\r\\n;stop button (1st tab)\\r\\n(osc-handle server \\"/1/push10\\" (fn [msg] (enable-vowel (first (\:args msg)))));vowel only\\r\\n(osc-handle server \\"/1/push11\\" (fn [msg] (enable-play (first (\:args msg)))));play\\r\\n(osc-handle server \\"/1/push12\\" (fn [msg] (stop)));stop\\r\\n\\r\\n;xy plot in 4th tab\\r\\n(osc-handle server \\"/4/xy\\" (fn [msg](println msg) (vowel-xy f1 f2 (seq (\:args msg)))))\\r\\n(osc-handle server \\"/4/toggle5\\" (fn [msg](println msg) (enable-play (first (\:args msg))))) ;play&stop toggle\\r\\n\\r\\n;(osc-close client)\\r\\n;(osc-close server) \\r\\n;(stop)" ";; Switching to keewii_cons.core namespace" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path (format \\"%02d\\" session-number) \\".wav\\")\\n  )\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-data [time freq_a freq_b]\\r\\n  (let [temp-path (str (cur_dir) \\"\\\\\\\\temp\\\\\\\\\\")] \\r\\n      (spit (str temp-path \\".txt\\") (str time \\" \\" freq_a \\" \\" freq_b \\"\\\\n\\")  \:append true))); vowel-showed cursor-f1 cursor-f2\\n\\r\\n(defn vowel-xy\\r\\n  [fa fb val]\\r\\n  \\"xy plot for vowel-mapping\\"\\r\\n  (let [x_freq (+ (* -1.0 (first val)) 1.0)\\r\\n        y_freq (+ (* -1.0 (second val)) 1.0)\\r\\n        newfreq_a (scale-range x_freq 0 1 (F1range 0) (F1range 1))\\r\\n        newfreq_b (scale-range y_freq 0 1 (F2range 0) (F2range 1))\\n        time (now)]\\r\\n  (doseq [] \\r\\n    (ctl fa \:freq newfreq_a)\\r\\n    (ctl fb \:freq newfreq_b)\\n    (save-temp-data time newfreq_a newfreq_b))))\\n\\n\\r\\n(defn make-vowel [vowel]\\r\\n  (doseq[] (f1 (vowel \:fa))(f2 (vowel \:fb))(f3 (vowel \:fc))))\\n\\n\\r\\n(defn enable-play [val] \\r\\n  \\"play basic f1,f2,f3\\"\\n  (let temp-path (str (cur_dir) \\"\\\\\\\\temp\\\\\\\\\\")\\r\\n    (if (\= val 1.0) \\n      (doseq [] (f1 750)(f2 1000)(f3 2890)(reset\! Time (now))\\n        (save-temp-wav sox-path temp-path))\\r\\n      (stop))\\n    \\n  ))\\r\\n(defn enable-vowel [val]\\r\\n  \\"play basic f1,f2,f3 and stop\\"\\r\\n  (if (\= val 1.0) (doseq [] (f1 (vowel \:fa))(f2 (vowel \:fb))(f3 (vowel \:fc)))(stop)))\\r\\n\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;Double slider control of vowel\\r\\n(defn loud-alter-vowel-f1\\r\\n  [f val] \\r\\n  (let [newval (scale-range val 0 1 (F1range 0) (F1range 1))]\\r\\n    (ctl f \:freq newval)\\r\\n    (dosync (ref-set vowel (merge @vowel {\:fa newval}))) ))\\r\\n(defn loud-alter-vowel-f2\\r\\n  [f val] \\r\\n  (let [newval (scale-range val 0 1 (F2range 0) (F2range 1))]\\r\\n    (ctl f \:freq newval)\\r\\n    (dosync (ref-set vowel (merge @vowel {\:fb newval})))))\\r\\n(defn silent-alter-vowel-f1 \\r\\n  [vowel val]  \\r\\n  (dosync (ref-set vowel (merge @vowel {\:fa (scale-range val 0 1 (F1range 0) (F1range 1))}))))\\r\\n(defn silent-alter-vowel-f2 \\r\\n  [vowel val]   \\r\\n  (dosync (ref-set vowel (merge @vowel {\:fb (scale-range val 0 1 (F2range 0) (F2range 1))}))))\\r\\n\\r\\n(defn speak [syllable]\\r\\n  (let [time (now)\\r\\n        slist (zip (take (dec (count syllable)) syllable) (rest syllable))]\\r\\n    (dorun (map \#(make-sound time %) slist))\\r\\n    (at (+ 100 time)  \\r\\n        (doseq[]  \\r\\n          (make-vowel @vowel)\\r\\n          (osc-handle server \\"/1/fader1\\" (fn [msg] (loud-alter-vowel-f1 f1 (first (\:args msg)))))\\r\\n          (osc-handle server \\"/1/fader2\\" (fn [msg] (loud-alter-vowel-f2 f2 (first (\:args msg)))))\\r\\n          (kill f1-dyn f2-dyn f3-dyn)))))\\r\\n;slider connection after consonant\\r\\n(defn two-slider-connection []\\r\\n  (doseq[]\\r\\n    (osc-handle server \\"/1/fader1\\" (fn [msg] (silent-alter-vowel-f1 vowel (first (\:args msg)))))\\r\\n    (osc-handle server \\"/1/fader2\\" (fn [msg] (silent-alter-vowel-f2 vowel (first (\:args msg)))))(stop)))\\r\\n;consonant functions\\r\\n(defn Enable-Consonant [val Consonant]\\r\\n  \\"consonant sound + vowel\\"\\r\\n  (if (\= val 1.0) (speak (Consonant @vowel)) (two-slider-connection)))\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;single slider control of vowel\\r\\n(defn make-f [f-list]\\r\\n  \\"this function makes vowel transition using minimum jerk trajectory\\"\\r\\n  (let [l (count f-list)\\r\\n        p-nodes (into [] (map \#(/ % (dec l)) (range l)))\\r\\n        pf-map (zipmap p-nodes f-list)\\r\\n        slist (zip (drop-last p-nodes) (rest p-nodes))]\\r\\n    (fn [p] \\r\\n      (first \\r\\n        (for [[lo-p hi-p] slist\\r\\n              \:when (<\= lo-p p hi-p)]\\r\\n          (let [xi (pf-map lo-p)\\r\\n                xf (pf-map hi-p)\\r\\n                p (* (- p lo-p) (dec l))] \\r\\n            (+ xi (* (- xi xf) (- (* 15.0 (* p p p p)) (* 6.0 (* p p p p p)) (* 10.0 (* p p p)) )))))))))\\r\\n(def y-f1 (make-f vowel-order-f1))\\r\\n(def y-f2 (make-f vowel-order-f2))\\r\\n(defn y [p] (vector (y-f1 p) (y-f2 p))) \\r\\n(defn alter-vowel \\r\\n  [val]  \\r\\n  (let [[freq-f1 freq-f2] (y val)]\\r\\n    (doseq [](ctl f1 \:freq freq-f1) (ctl f2 \:freq freq-f2)\\r\\n      (dosync (ref-set vowel (merge @vowel {\:fa freq-f1 \:fb freq-f2}))))))\\r\\n(defn speak-single [syllable]\\r\\n  (let [time (now)\\r\\n        slist (zip (take (dec (count syllable)) syllable) (rest syllable))]\\r\\n    (dorun (map \#(make-sound time %) slist))\\r\\n    (at (+ 100 time)  \\r\\n        (doseq[]  \\r\\n          (make-vowel @vowel)\\r\\n          (osc-handle server \\"/1/fader1\\" (fn [msg] (println msg)(alter-vowel (first (\:args msg)))))\\r\\n          (kill f1-dyn f2-dyn f3-dyn)))))\\r\\n;slider connection after consonant\\r\\n(defn one-slider-connection []\\r\\n  (doseq[]\\r\\n    (osc-handle server \\"/1/fader1\\" (fn [msg] (alter-vowel vowel (first (\:args msg))))) (stop)))\\r\\n;consonant functions\\r\\n(defn Enable-Consonant-single [val Consonant]\\r\\n  \\"consonant sound + vowel\\"\\r\\n  (if (\= val 1.0) (speak-single (Consonant @vowel)) (one-slider-connection)))\\n(in-ns 'keewii_cons.core)" ";; Switching to keewii_cons.toolbox namespace" ";; Switching to keewii_cons.core namespace" ";; Switching to keewii_cons.toolbox namespace" ";; Switching to keewii_cons.core namespace" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n  (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav\\")\\n  (printf \\"dd\\")\\n  )\\n(in-ns 'keewii_cons.core)" ";; Switching to keewii_cons.core namespace" ";; Switching to keewii_cons.toolbox namespace" ";; Switching to keewii_cons.core namespace" ";; Switching to keewii-cons.core-test namespace" "(ns keewii-cons.core-test\\n(\:use (incanter core charts datasets)))" ";; Switching to keewii-cons.core-test namespace" "\\r\\n\\r\\n;; plot the cosine function\\r\\n(def x (range -1 5 0.01))\\r\\n(def y (cos (mult 2 Math/PI x)))\\r\\n(view (xy-plot x y))\\r\\n\\r\\n;; plot gamma pdf with different parameters\\r\\n(def x2 (range 0 20 0.1))\\r\\n(def gamma-plot (xy-plot x2 (pdf-gamma x2 \:shape 1 \:rate 2)\\r\\n\:legend true\\r\\n\:title \\"Gamma PDF\\"\\r\\n\:y-label \\"Density\\"))\\r\\n(view gamma-plot)\\r\\n(add-lines gamma-plot x2 (pdf-gamma x2 \:shape 2 \:rate 2))\\r\\n(add-lines gamma-plot x2 (pdf-gamma x2 \:shape 3 \:rate 2))\\r\\n(add-lines gamma-plot x2 (pdf-gamma x2 \:shape 5 \:rate 1))\\r\\n(add-lines gamma-plot x2 (pdf-gamma x2 \:shape 9 \:rate 0.5))\\r\\n\\r\\n;; use \:group-by option\\r\\n(use '(incanter core charts datasets))\\r\\n\\r\\n(with-data (get-dataset \:chick-weight)\\r\\n(view (xy-plot \:Time \:weight \:group-by \:Chick)))" "(view (xy-plot x y))" "(def y (cos (mult 2 Math/PI x)))" "(view (xy-plot x y))" "(view (xy-plot 1 1))" "y" "x" "(xy-plot x y)" "(view (xy-plot x y))" "(ns keewii-cons.core-test\\n(\:use (incanter core charts datasets)))" "(def x (range -1 5 0.01))" "(def y (cos (mult 2 Math/PI x)))" "(view (xy-plot x y))" "(ns keewii-cons.core-test\\n(\:use (incanter core charts datasets)))" "(def x (range -1 5 0.01))" "(def y (cos (mult 2 Math/PI x)))" "(view (xy-plot x y))" "(def x2 (range 0 20 0.1))" "(def gamma-plot (xy-plot x2 (pdf-gamma x2 \:shape 1 \:rate 2)\\r\\n\:legend true\\r\\n\:title \\"Gamma PDF\\"\\r\\n\:y-label \\"Density\\"))" "(use '(incanter core charts datasets))" "(with-data (get-dataset \:chick-weight)\\r\\n(view (xy-plot \:Time \:weight \:group-by \:Chick)))" "(view (xy-plot x (map \#(%) y)))" "(view (xy-plot x (map \#(y %) x)))" "(ns keewii-cons.core-test\\n(\:use [incanter.charts]\\r\\n      [incanter.core \:only (view)]))" "(def x (range -1 5 0.01))" "(def y (cos (mult 2 Math/PI x)))" "(view (xy-plot x (map \#(y %) x)))" "(defn y [k] (cos (mult 2 Math/PI k)))" "(view (xy-plot x (map \#(y %) x)))" "(def y (cos (mult 2 Math/PI x)))" "(view (xy-plot x y))" "(def cars (to-matrix (get-dataset \:cars)))\\r\\n(def y (sel cars \:cols 0))\\r\\n(def x (sel cars \:cols 1))\\r\\n(def plot1 (scatter-plot x y \:legend true))\\r\\n(view plot1)" "(def plot1 (xy-plot x y \:legend true))" "(view (scatter-plot x y))" "(def x (range -1 5 0.01))" "(def y (cos (mult 2 Math/PI x)))" "(view (scatter-plot x y))" ";; Switching to keewii_cons.core namespace" "(dosync\\r\\n (osc-handle server \\"/1/fader1\\" (fn [msg] (silent-alter-vowel-f1 vowel (first (\:args msg)))))\\r\\n (osc-handle server \\"/1/fader2\\" (fn [msg] (silent-alter-vowel-f2 vowel (first (\:args msg))))))" "(ns keewii_cons.core\\r\\n  (\:use [overtone.live]\\r\\n        [keewii_cons.toolbox]\\r\\n        [keewii_cons.sequence]\\r\\n        [keewii_cons.basic_setting]))" ";; Switching to keewii_cons.core namespace" "(ns keewii_cons.core\\r\\n  (\:use [overtone.live]\\r\\n        [keewii_cons.toolbox]\\r\\n        [keewii_cons.sequence]\\r\\n        [keewii_cons.basic_setting]))" ";; Switching to keewii_cons.core namespace" "(in-ns 'keewii_cons.toolbox)\\n(defn vowel-xy\\r\\n  [fa fb val]\\r\\n  \\"xy plot for vowel-mapping\\"\\r\\n  (let [x_freq (+ (* -1.0 (first val)) 1.0)\\r\\n        y_freq (+ (* -1.0 (second val)) 1.0)\\r\\n        newfreq_a (scale-range x_freq 0 1 (F1range 0) (F1range 1))\\r\\n        newfreq_b (scale-range y_freq 0 1 (F2range 0) (F2range 1))\\n        time (now)]\\r\\n  (doseq [] \\r\\n    (ctl fa \:freq newfreq_a)\\r\\n    (ctl fb \:freq newfreq_b)\\n    (view (scatter-plot (first val) (second val)))\\n    (save-temp-data time newfreq_a newfreq_b))))\\n(in-ns 'keewii_cons.core)" ";; Switching to keewii_cons.core namespace" "(in-ns 'keewii-cons.core-test)\\n(def x (range -1 5 0.01))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii-cons.core-test)\\n(def y (cos (mult 2 Math/PI x)))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii-cons.core-test)\\n(ns keewii-cons.core-test\\n(\:use [incanter.charts]\\r\\n      [incanter.core \:only (view)]))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii-cons.core-test)\\n(def cars (to-matrix (get-dataset \:cars)))\\n(in-ns 'keewii_cons.core)" ";; Switching to keewii-cons.core-test namespace" "(def y (sel cars \:cols 0))" "(def x (range -1 5 0.01))" "(def y (cos (mult 2 Math/PI x)))" "(ns keewii-cons.core-test\\n(\:use [incanter.charts]\\r\\n      [incanter.core]))" "(def x (range -1 5 0.01))" "(def y (cos (mult 2 Math/PI x)))" "(view (scatter-plot x y))" "(view (scatter-plot 2 2))" "(in-ns 'keewii_cons.basic_setting)\\n(def (ref x))\\n(in-ns 'keewii-cons.core-test)" ";; Switching to keewii_cons.core namespace" ";; Switching to keewii_cons.basic_setting namespace" "points" "(points \:x)" "(points\\n  )" "(deref points)" "(swap\! (points \:x) 2)" "(swap\! (fn [points] (reset\! x 2)))" "(swap\! (fn [points] (reset\! \:x 2)))" "(swap\! (fn points [points] (reset\! x 2)))" "(swap\! (points \:x) 3)" "((deref points) \:x)" "(swap\! ((deref points) \:x) [3])" "(deref points)" "(let [deref_points (deref points)\\n      xx (deref_points \:x)\\n      yy (deref_points \:y)]\\n  (conj xx 2))" "(let [deref_points (deref points)\\n      xx (deref_points \:x)\\n      yy (deref_points \:y)]\\n  (conj xx 23))" "(def points (atom {\:x [2] \:y []}))" "(let [deref_points (deref points)\\n      xx (deref_points \:x)\\n      yy (deref_points \:y)]\\n  (conj xx 23))" ";; Switching to keewii_cons.core namespace" "points" "(in-ns 'keewii_cons.toolbox)\\n(defn vowel-xy\\r\\n  [fa fb val]\\r\\n  \\"xy plot for vowel-mapping\\"\\r\\n  (let [x_freq (+ (* -1.0 (first val)) 1.0)\\r\\n        y_freq (+ (* -1.0 (second val)) 1.0)\\r\\n        newfreq_a (scale-range x_freq 0 1 (F1range 0) (F1range 1))\\r\\n        newfreq_b (scale-range y_freq 0 1 (F2range 0) (F2range 1))\\n        time (now)]\\r\\n  (doseq [] \\r\\n    (ctl fa \:freq newfreq_a)\\r\\n    (ctl fb \:freq newfreq_b)\\n    ;(save-data-memory time (first val) (second val))\\n    (save-temp-data time newfreq_a newfreq_b))))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn save-data-memory [time x1 y1]\\n  (let [deref_points (deref points)\\r\\n         xx (deref_points \:x)\\r\\n         yy (deref_points \:y)]\\r\\n     (conj xx x1)\\n     (conj yy y1)\\n     (swap\! points {\:x xx \:y yy})\\n     ))\\n(in-ns 'keewii_cons.core)" "(deref points)" "(in-ns 'keewii_cons.basic_setting)\\n(def points (atom {\:x [] \:y []}))\\n(in-ns 'keewii_cons.core)" "(deref points)" "((deref points) \:x)" "(conj ((deref points) \:x) 2)" "(swap\! points  {\:x [2] \:y [2]})" "points" "(swap\! points {\:x [2] \:y [2]})" "points" "(reset\! points {\:x [2] \:y [2]})" ";; Switching to keewii_cons.core namespace" "points" "(in-ns 'keewii_cons.toolbox)\\n(defn save-data-memory [time x1 y1]\\n  (let [deref_points (deref points)\\r\\n         xx (deref_points \:x)\\r\\n         yy (deref_points \:y)\\n         ]\\n     (reset\! points {\:x (conj xx x1) \:y (conj yy y1)})\\n     ))\\n(in-ns 'keewii_cons.core)" "points" "(in-ns 'keewii_cons.toolbox)\\n(defn plotting-points [val]\\n  (if (\= val 1.0) (view (scatter-plot ((deref points) \:x) ((deref points) \:y))))\\n  )\\n(in-ns 'keewii_cons.core)" "(osc-handle server \\"/4/toggle4\\" (fn [msg](println msg) (plotting-points (first (\:args msg))) ))" ";; Switching to keewii_cons.core namespace" "points" "(in-ns 'keewii_cons.basic_setting)\\n(def points (atom {\:x [] \:y []}))\\n(in-ns 'keewii_cons.core)" ";; Switching to keewii-cons.test namespace" ";; Switching to keewii_cons.core namespace" ";; Switching to keewii_cons.toolbox namespace" ";; Switching to keewii_cons.core namespace" "(in-ns 'keewii_cons.toolbox)\\n(defn vowel-xy\\r\\n  [fa fb val]\\r\\n  \\"xy plot for vowel-mapping\\"\\r\\n  (let [x_freq (+ (* -1.0 (first val)) 1.0)\\r\\n        y_freq (+ (* -1.0 (second val)) 1.0)\\r\\n        newfreq_a (scale-range x_freq 0 1 (F1range 0) (F1range 1))\\r\\n        newfreq_b (scale-range y_freq 0 1 (F2range 0) (F2range 1))\\n        time (* (- (now) Time) 1000)]\\r\\n  (doseq [] \\r\\n    (ctl fa \:freq newfreq_a)\\r\\n    (ctl fb \:freq newfreq_b)\\n    (save-data-memory time (first val) (second val))\\n    (save-temp-data time newfreq_a newfreq_b))))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn vowel-xy\\r\\n  [fa fb val]\\r\\n  \\"xy plot for vowel-mapping\\"\\r\\n  (let [x_freq (+ (* -1.0 (first val)) 1.0)\\r\\n        y_freq (+ (* -1.0 (second val)) 1.0)\\r\\n        newfreq_a (scale-range x_freq 0 1 (F1range 0) (F1range 1))\\r\\n        newfreq_b (scale-range y_freq 0 1 (F2range 0) (F2range 1))\\n        time (* (- (now) @Time) 1000)]\\r\\n  (doseq [] \\r\\n    (ctl fa \:freq newfreq_a)\\r\\n    (ctl fb \:freq newfreq_b)\\n    (save-data-memory time (first val) (second val))\\n    (save-temp-data time newfreq_a newfreq_b))))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn vowel-xy\\r\\n  [fa fb val]\\r\\n  \\"xy plot for vowel-mapping\\"\\r\\n  (let [x_freq (+ (* -1.0 (first val)) 1.0)\\r\\n        y_freq (+ (* -1.0 (second val)) 1.0)\\r\\n        newfreq_a (scale-range x_freq 0 1 (F1range 0) (F1range 1))\\r\\n        newfreq_b (scale-range y_freq 0 1 (F2range 0) (F2range 1))\\n        time (/ (- (now) @Time) 1000)]\\r\\n  (doseq [] \\r\\n    (ctl fa \:freq newfreq_a)\\r\\n    (ctl fb \:freq newfreq_b)\\n    (save-data-memory time (first val) (second val))\\n    (save-temp-data time newfreq_a newfreq_b))))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn plotting-points [val]\\n  (if (\= val 1.0) \\n    (view (scatter-plot ((deref points) \:time) ((deref points) \:x) \:x-label \\"time(ms)\\" \:y-label \\"x\\"))\\n    (view (scatter-plot ((deref points) \:time) ((deref points) \:y) \:x-label \\"time(ms)\\" \:y-label \\"y\\"))\\n    ))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n  (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav\\")\\n  (println (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav\\"))\\n  )\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n  (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\n  ;(println (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav\\"))\\n  )\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n  (str \\"cmd /c \\" recorder-path \\" -c 2 c\:\\\\\\\\temp.wav\\")\\n  ;(println (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav\\"))\\n  )\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n  (str \\"cmd /c \\" recorder-path \\" -c 2 c\:\\\\\\\\temp.wav\\")\\n  (println (str \\"cmd /c \\" recorder-path \\" -c 2 c\:\\\\\\\\temp.wav\\"))\\n  )\\n(in-ns 'keewii_cons.core)" "(. (java.lang.Runtime/getRuntime) exec \\"taskkill /F /IM  rec.exe\\")" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\n  (let [recording-info (str \\"cmd /c \\" recorder-path \\" -c 2 c\:\\\\\\\\temp.wav\\")]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n    (. (java.lang.Runtime/getRuntime) exec recording-info)\\n  ;(println (str \\"cmd /c \\" recorder-path \\" -c 2 c\:\\\\\\\\temp.wav\\"))\\n  ))\\n(in-ns 'keewii_cons.core)" "(in-ns 'keewii_cons.toolbox)\\n(defn plotting-points [val]\\n  (if (\= val 1.0) \\n    (view (scatter-plot ((deref points) \:time) ((deref points) \:x) \:x-label \\"time(s)\\" \:y-label \\"x\\"))\\n    (view (scatter-plot ((deref points) \:time) ((deref points) \:y) \:x-label \\"time(s)\\" \:y-label \\"y\\"))\\n    ))\\n(in-ns 'keewii_cons.core)" "points" "(in-ns 'keewii_cons.toolbox)\\n(defn save-temp-wav [recorder-path temp-path]\\n  (let [recording-info (str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav\\")]\\r\\n  \\"This function passes a command to record a wave file by sox-14-4-1 program\\"\\r\\n  ;(str \\"cmd /c \\" recorder-path \\" -c 2 \\" temp-path \\"temp.wav trim 0 5\\")\\r\\n    (. (java.lang.Runtime/getRuntime) exec recording-info)\\n  ;(println (str \\"cmd /c \\" recorder-path \\" -c 2 c\:\\\\\\\\temp.wav\\"))\\n  ))\\n(in-ns 'keewii_cons.core)" ";; Switching to keewii_cons.core namespace"]
eclipse.preferences.version=1
